<!-- vim: set syntax=markdown: -->
<!-- livebook:{"persist_outputs":true} -->

# Dia 5 - Termas

## Lendo o arquivo de entrada

Cada linha pode ser representada por uma lista de 4 coordenadas: `[x1, y1, x2, y2]`.

```elixir
input_data =
  File.read!("data/day_5_input.txt")
  |> String.split(["\n", ",", " -> "], trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.chunk_every(4)
```

```output
[
  [309, 347, 309, 464],
  [425, 687, 300, 687],
  [226, 766, 885, 107],
  [681, 618, 921, 378],
  [968, 54, 38, 984],
  [35, 341, 321, 627],
  [493, 485, 632, 485],
  [908, 183, 110, 981],
  [677, 378, 677, 231],
  [703, 378, 703, 536],
  [179, 581, 429, 331],
  [339, 133, 664, 458],
  [212, 680, 212, 136],
  [251, 699, 858, 699],
  [163, 725, 163, 22],
  [70, 226, 97, 226],
  [968, 119, 954, 119],
  [551, 551, 415, 551],
  [768, 167, 546, 167],
  [125, 302, 155, 332],
  [640, 201, 341, 201],
  [757, 791, 757, 736],
  [406, 570, 418, 558],
  [250, 919, 976, 193],
  [570, 362, 304, 96],
  [463, 973, 463, 337],
  [322, 199, 322, 73],
  [141, 186, 141, 906],
  [964, 940, 964, 743],
  [99, 461, 15, 461],
  [255, 856, 255, 194],
  [650, 293, 650, 136],
  [89, 98, 969, 978],
  [974, 977, 37, 40],
  [641, 795, 985, 795],
  [441, 972, 441, 427],
  [18, 942, 943, 17],
  [166, 167, 617, 167],
  [182, 146, 790, 146],
  [88, 854, 928, 14],
  [537, 38, 233, 38],
  [786, 562, 867, 562],
  [251, 102, 147, 102],
  [551, 373, 672, 252],
  [915, 713, 791, 589],
  [28, 373, 28, 651],
  [463, 365, 396, ...],
  [349, 948, ...],
  [246, ...],
  [...],
  ...
]
```

## Traçando as linhas

Para traçar as linhas horizontais e verticais, basta criar uma lista de pontos intermediario entre os pontos `{x1, y1}` e `{x2, y2}`:

```elixir
points =
  input_data
  |> Enum.map(fn
    [same_x, y1, same_x, y2] -> Enum.map(y1..y2, fn y -> [same_x, y] end)
    [x1, same_y, x2, same_y] -> Enum.map(x1..x2, fn x -> [x, same_y] end)
    _ -> []
  end)
  |> List.flatten()
  |> Enum.chunk_every(2)
```

```output
[
  [309, 347],
  [309, 348],
  [309, 349],
  [309, 350],
  [309, 351],
  [309, 352],
  [309, 353],
  [309, 354],
  [309, 355],
  [309, 356],
  [309, 357],
  [309, 358],
  [309, 359],
  [309, 360],
  [309, 361],
  [309, 362],
  [309, 363],
  [309, 364],
  [309, 365],
  [309, 366],
  [309, 367],
  [309, 368],
  [309, 369],
  [309, 370],
  [309, 371],
  [309, 372],
  [309, 373],
  [309, 374],
  [309, 375],
  [309, 376],
  [309, 377],
  [309, 378],
  [309, 379],
  [309, 380],
  [309, 381],
  [309, 382],
  [309, 383],
  [309, 384],
  [309, 385],
  [309, 386],
  [309, 387],
  [309, 388],
  [309, 389],
  [309, 390],
  [309, 391],
  [309, 392],
  [309, 393],
  [309, 394],
  [309, ...],
  [...],
  ...
]
```

## Estrela 9: Contando overlaps

Agora basta contar quantos pontos repetidos temos na lista

```elixir
points
|> Enum.group_by(fn item -> item end)
|> Enum.map(fn {key, value} -> {key, Enum.count(value)} end)
|> Enum.count(fn {_coords, occurrences} -> occurrences > 1 end)
```

```output
6113
```

## Estrela 10: Contando as linhas diagonais

Como utilizamos pattern matching para contar as linhas horizontais e verticais, agora basta acrescentar um caso para contar também as diagonais. Vamos copiar o código da Estrela 9 e adicionar o tratamento para linhas diagonais:

```elixir
points_with_diagonals =
  input_data
  |> Enum.map(fn
    [same_x, y1, same_x, y2] -> Enum.map(y1..y2, fn y -> [same_x, y] end)
    [x1, same_y, x2, same_y] -> Enum.map(x1..x2, fn x -> [x, same_y] end)
    [x1, y1, x2, y2] -> Enum.map(Enum.zip(x1..x2, y1..y2), &Tuple.to_list/1)
  end)
  |> List.flatten()
  |> Enum.chunk_every(2)
```

```output
[
  [309, 347],
  [309, 348],
  [309, 349],
  [309, 350],
  [309, 351],
  [309, 352],
  [309, 353],
  [309, 354],
  [309, 355],
  [309, 356],
  [309, 357],
  [309, 358],
  [309, 359],
  [309, 360],
  [309, 361],
  [309, 362],
  [309, 363],
  [309, 364],
  [309, 365],
  [309, 366],
  [309, 367],
  [309, 368],
  [309, 369],
  [309, 370],
  [309, 371],
  [309, 372],
  [309, 373],
  [309, 374],
  [309, 375],
  [309, 376],
  [309, 377],
  [309, 378],
  [309, 379],
  [309, 380],
  [309, 381],
  [309, 382],
  [309, 383],
  [309, 384],
  [309, 385],
  [309, 386],
  [309, 387],
  [309, 388],
  [309, 389],
  [309, 390],
  [309, 391],
  [309, 392],
  [309, 393],
  [309, 394],
  [309, ...],
  [...],
  ...
]
```

## Contando novamente

Agora basta repetir o cálculo usando a mesma fórmula de antes:

```elixir
points_with_diagonals
|> Enum.group_by(fn item -> item end)
|> Enum.map(fn {key, value} -> {key, Enum.count(value)} end)
|> Enum.count(fn {_coords, occurrences} -> occurrences > 1 end)
```

```output
20373
```
