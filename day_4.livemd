<!-- livebook:{"persist_outputs":true} -->

# Dia 4: Bingo!

## Leitura dos dados

Como precisamos marcar nossas tabelas, é interessante ter algo para nos indicar se o número foi ou não sorteado. Assim, durante a leitura vamos mapear cada número da tabela em uma tupla `{Número, foi_sorteado?}`:

```elixir
[numbers | tables] =
  "data/day_4_input.txt"
  |> File.read!()
  |> String.split("\n\n", trim: true)

bingo_numbers =
  numbers
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)

bingo_tables =
  tables
  |> Enum.map(&String.split(&1, "\n", trim: true))
  |> Enum.map(fn table ->
    Enum.flat_map(
      table,
      fn line -> String.split(line, " ", trim: true) end
    )
  end)
  |> Enum.map(fn table ->
    Enum.map(
      table,
      fn number -> {String.to_integer(number), false} end
    )
  end)
```

```output
[
  [
    {37, false},
    {72, false},
    {60, false},
    {35, false},
    {89, false},
    {32, false},
    {49, false},
    {4, false},
    {77, false},
    {82, false},
    {30, false},
    {26, false},
    {27, false},
    {63, false},
    {88, false},
    {29, false},
    {43, false},
    {16, false},
    {34, false},
    {58, false},
    {48, false},
    {33, false},
    {96, false},
    {79, false},
    {94, false}
  ],
  [
    {41, false},
    {94, false},
    {77, false},
    {43, false},
    {87, false},
    {2, false},
    {17, false},
    {82, false},
    {96, false},
    {25, false},
    {95, false},
    {49, false},
    {32, false},
    {12, false},
    {9, false},
    {59, false},
    {33, false},
    {67, false},
    {71, false},
    {64, false},
    {88, false},
    {54, false},
    {93, false},
    {85, false},
    {30, false}
  ],
  [
    {78, false},
    {84, false},
    {73, false},
    {64, false},
    {81, false},
    {6, false},
    {66, false},
    {54, false},
    {21, false},
    {15, false},
    {72, false},
    {88, false},
    {69, false},
    {5, false},
    {93, false},
    {11, false},
    {96, false},
    {38, false},
    {95, false},
    {44, false},
    {13, false},
    {41, false},
    {94, false},
    {55, false},
    {48, false}
  ],
  [
    {5, false},
    {14, false},
    {2, false},
    {82, false},
    {33, false},
    {56, false},
    {26, false},
    {0, false},
    {84, false},
    {92, false},
    {8, false},
    {95, false},
    {24, false},
    {54, false},
    {25, false},
    {68, false},
    {67, false},
    {15, false},
    {85, false},
    {47, false},
    {20, false},
    {91, false},
    {36, false},
    {13, false},
    {88, false}
  ],
  [
    {39, false},
    {26, false},
    {33, false},
    {65, false},
    {32, false},
    {78, false},
    {72, false},
    {80, false},
    {51, false},
    {0, false},
    {35, false},
    {64, false},
    {60, false},
    {18, false},
    {31, false},
    {93, false},
    {59, false},
    {83, false},
    {54, false},
    {74, false},
    {86, false},
    {5, false},
    {9, false},
    {98, false},
    {69, false}
  ],
  [
    {0, false},
    {8, false},
    {20, false},
    {18, false},
    {70, false},
    {5, false},
    {29, false},
    {65, false},
    {21, false},
    {57, false},
    {68, false},
    {61, false},
    {83, false},
    {63, false},
    {51, false},
    {91, false},
    {73, false},
    {77, false},
    {75, false},
    {80, false},
    {35, false},
    {62, false},
    {16, false},
    {32, false},
    {10, false}
  ],
  [
    {51, false},
    {78, false},
    {58, false},
    {67, false},
    {93, false},
    {50, false},
    {14, false},
    {99, false},
    {5, false},
    {31, false},
    {6, false},
    {21, false},
    {48, false},
    {30, false},
    {83, false},
    {22, false},
    {33, false},
    {23, false},
    {1, false},
    {34, false},
    {2, false},
    {72, false},
    {57, false},
    {54, false},
    {42, false}
  ],
  [
    {15, false},
    {68, false},
    {4, false},
    {24, false},
    {49, false},
    {12, false},
    {9, false},
    {74, false},
    {88, false},
    {51, false},
    {91, false},
    {19, false},
    {50, false},
    {76, false},
    {75, false},
    {80, false},
    {84, false},
    {23, false},
    {17, false},
    {53, false},
    {67, false},
    {42, false},
    {22, false},
    {85, false},
    {36, false}
  ],
  [
    {41, false},
    {78, false},
    {11, false},
    {69, false},
    {9, false},
    {90, false},
    {25, false},
    {98, false},
    {65, false},
    {77, false},
    {97, false},
    {53, false},
    {37, false},
    {84, false},
    {89, false},
    {58, false},
    {63, false},
    {5, false},
    {55, false},
    {1, false},
    {24, false},
    {10, false},
    {74, false},
    {20, false},
    {82, false}
  ],
  [
    {42, false},
    {19, false},
    {95, false},
    {89, false},
    {49, false},
    {61, false},
    {31, false},
    {50, false},
    {76, false},
    {3, false},
    {34, false},
    {47, false},
    {32, false},
    {69, false},
    {86, false},
    {78, false},
    {68, false},
    {99, false},
    {11, false},
    {91, false},
    {55, false},
    {12, false},
    {73, false},
    {45, false},
    {23, false}
  ],
  [
    {24, false},
    {53, false},
    {95, false},
    {64, false},
    {14, false},
    {40, false},
    {29, false},
    {71, false},
    {57, false},
    {97, false},
    {62, false},
    {70, false},
    {25, false},
    {22, false},
    {2, false},
    {88, false},
    {68, false},
    {33, false},
    {82, false},
    {59, false},
    {72, false},
    {38, false},
    {76, false},
    {78, false},
    {43, false}
  ],
  [
    {73, false},
    {36, false},
    {84, false},
    {90, false},
    {40, false},
    {16, false},
    {4, false},
    {57, false},
    {9, false},
    {29, false},
    {38, false},
    {97, false},
    {46, false},
    {51, false},
    {83, false},
    {86, false},
    {88, false},
    {99, false},
    {44, false},
    {32, false},
    {54, false},
    {49, false},
    {37, false},
    {43, false},
    {62, false}
  ],
  [
    {18, false},
    {66, false},
    {17, false},
    {49, false},
    {27, false},
    {24, false},
    {93, false},
    {91, false},
    {87, false},
    {72, false},
    {54, false},
    {37, false},
    {77, false},
    {43, false},
    {10, false},
    {88, false},
    {80, false},
    {60, false},
    {15, false},
    {79, false},
    {47, false},
    {68, false},
    {12, false},
    {2, false},
    {69, false}
  ],
  [
    {9, false},
    {23, false},
    {13, false},
    {57, false},
    {68, false},
    {38, false},
    {97, false},
    {63, false},
    {88, false},
    {98, false},
    {96, false},
    {62, false},
    {65, false},
    {82, false},
    {58, false},
    {61, false},
    {83, false},
    {29, false},
    {47, false},
    {40, false},
    {21, false},
    {86, false},
    {20, false},
    {16, false},
    {56, false}
  ],
  [
    {27, false},
    {90, false},
    {37, false},
    {97, false},
    {52, false},
    {14, false},
    {96, false},
    {76, false},
    {21, false},
    {79, false},
    {0, false},
    {43, false},
    {63, false},
    {81, false},
    {56, false},
    {42, false},
    {62, false},
    {23, false},
    {55, false},
    {74, false},
    {45, false},
    {72, false},
    {77, false},
    {44, false},
    {47, false}
  ],
  [
    {8, false},
    {78, false},
    {63, false},
    {24, false},
    {87, false},
    {9, false},
    {23, false},
    {12, false},
    {17, false},
    {68, false},
    {36, false},
    {83, false},
    {45, false},
    {61, false},
    {50, false},
    {84, false},
    {77, false},
    {18, false},
    {86, false},
    {37, false},
    {31, false},
    {26, false},
    {19, false},
    {49, false},
    {94, false}
  ],
  [
    {72, false},
    {84, false},
    {59, false},
    {48, false},
    {40, false},
    {92, false},
    {98, false},
    {3, false},
    {1, false},
    {80, false},
    {83, false},
    {15, false},
    {85, false},
    {63, false},
    {39, false},
    {2, false},
    {64, false},
    {58, false},
    {13, false},
    {20, false},
    {29, false},
    {88, false},
    {60, false},
    {12, false},
    {74, false}
  ],
  [
    {21, false},
    {94, false},
    {52, false},
    {6, false},
    {4, false},
    {89, false},
    {70, false},
    {39, false},
    {23, false},
    {64, false},
    {96, false},
    {87, false},
    {31, false},
    {54, false},
    {14, false},
    {88, false},
    {35, false},
    {83, false},
    {13, false},
    {56, false},
    {84, false},
    {10, false},
    {98, false},
    {48, false},
    {68, false}
  ],
  [
    {70, false},
    {33, false},
    {48, false},
    {21, false},
    {37, false},
    {91, false},
    {95, false},
    {65, false},
    {38, false},
    {77, false},
    {92, false},
    {14, false},
    {26, false},
    {96, false},
    {60, false},
    {12, false},
    {6, false},
    {73, false},
    {13, false},
    {81, false},
    {54, false},
    {55, false},
    {2, false},
    {45, false},
    {80, false}
  ],
  [
    {60, false},
    {11, false},
    {67, false},
    {95, false},
    {28, false},
    {5, false},
    {32, false},
    {0, false},
    {71, false},
    {12, false},
    {47, false},
    {78, false},
    {13, false},
    {54, false},
    {43, false},
    {49, false},
    {89, false},
    {82, false},
    {66, false},
    {77, false},
    {26, false},
    {53, false},
    {19, false},
    {79, false},
    {3, false}
  ],
  [
    {81, false},
    {9, false},
    {53, false},
    {72, false},
    {29, false},
    {56, false},
    {35, false},
    {60, false},
    {44, false},
    {45, false},
    {42, false},
    {94, false},
    {96, false},
    {88, false},
    {64, false},
    {15, false},
    {92, false},
    {4, false},
    {6, false},
    {14, false},
    {97, false},
    {11, false},
    {17, false},
    {61, false},
    {63, false}
  ],
  [
    {24, false},
    {43, false},
    {33, false},
    {9, false},
    {34, false},
    {36, false},
    {28, false},
    {69, false},
    {35, false},
    {7, false},
    {47, false},
    {4, false},
    {14, false},
    {82, false},
    {38, false},
    {11, false},
    {1, false},
    {52, false},
    {0, false},
    {49, false},
    {93, false},
    {87, false},
    {98, false},
    {41, false},
    {5, false}
  ],
  [
    {37, false},
    {79, false},
    {99, false},
    {34, false},
    {77, false},
    {38, false},
    {26, false},
    {25, false},
    {95, false},
    {70, false},
    {28, false},
    {78, false},
    {40, false},
    {33, false},
    {86, false},
    {41, false},
    {57, false},
    {96, false},
    {10, false},
    {24, false},
    {9, false},
    {74, false},
    {72, false},
    {50, false},
    {81, false}
  ],
  [
    {18, false},
    {96, false},
    {52, false},
    {29, false},
    {61, false},
    {38, false},
    {90, false},
    {1, false},
    {48, false},
    {51, false},
    {78, false},
    {11, false},
    {27, false},
    {55, false},
    {97, false},
    {33, false},
    {21, false},
    {87, false},
    {93, false},
    {67, false},
    {79, false},
    {46, false},
    {94, false},
    {45, false},
    {2, ...}
  ],
  [
    {27, false},
    {63, false},
    {6, false},
    {90, false},
    {10, false},
    {3, false},
    {60, false},
    {24, false},
    {5, false},
    {89, false},
    {78, false},
    {72, false},
    {76, false},
    {54, false},
    {8, false},
    {33, false},
    {22, false},
    {87, false},
    {51, false},
    {58, false},
    {4, false},
    {37, false},
    {64, false},
    {91, ...},
    {...}
  ],
  [
    {63, false},
    {73, false},
    {87, false},
    {80, false},
    {89, false},
    {29, false},
    {14, false},
    {95, false},
    {48, false},
    {3, false},
    {71, false},
    {55, false},
    {69, false},
    {9, false},
    {67, false},
    {30, false},
    {99, false},
    {19, false},
    {2, false},
    {86, false},
    {26, false},
    {72, false},
    {88, ...},
    {...},
    ...
  ],
  [
    {12, false},
    {57, false},
    {81, false},
    {78, false},
    {40, false},
    {35, false},
    {4, false},
    {55, false},
    {15, false},
    {39, false},
    {33, false},
    {45, false},
    {25, false},
    {60, false},
    {70, false},
    {86, false},
    {79, false},
    {88, false},
    {52, false},
    {3, false},
    {90, false},
    {20, ...},
    {...},
    ...
  ],
  [
    {92, false},
    {51, false},
    {98, false},
    {47, false},
    {99, false},
    {41, false},
    {78, false},
    {65, false},
    {4, false},
    {46, false},
    {19, false},
    {87, false},
    {39, false},
    {89, false},
    {17, false},
    {12, false},
    {23, false},
    {36, false},
    {29, false},
    {44, false},
    {6, ...},
    {...},
    ...
  ],
  [
    {8, false},
    {34, false},
    {81, false},
    {67, false},
    {80, false},
    {83, false},
    {92, false},
    {13, false},
    {11, false},
    {41, false},
    {39, false},
    {89, false},
    {93, false},
    {49, false},
    {43, false},
    {20, false},
    {69, false},
    {3, false},
    {74, false},
    {76, ...},
    {...},
    ...
  ],
  [
    {66, false},
    {39, false},
    {94, false},
    {98, false},
    {28, false},
    {72, false},
    {4, false},
    {25, false},
    {77, false},
    {76, false},
    {56, false},
    {41, false},
    {84, false},
    {59, false},
    {40, false},
    {36, false},
    {87, false},
    {18, false},
    {44, ...},
    {...},
    ...
  ],
  [
    {45, false},
    {91, false},
    {2, false},
    {92, false},
    {16, false},
    {21, false},
    {47, false},
    {86, false},
    {81, false},
    {56, false},
    {31, false},
    {11, false},
    {62, false},
    {5, false},
    {95, false},
    {39, false},
    {1, false},
    {30, ...},
    {...},
    ...
  ],
  [
    {86, false},
    {11, false},
    {77, false},
    {30, false},
    {43, false},
    {51, false},
    {88, false},
    {73, false},
    {98, false},
    {94, false},
    {72, false},
    {63, false},
    {38, false},
    {56, false},
    {10, false},
    {57, false},
    {92, ...},
    {...},
    ...
  ],
  [
    {56, false},
    {95, false},
    {3, false},
    {43, false},
    {65, false},
    {39, false},
    {62, false},
    {93, false},
    {19, false},
    {27, false},
    {61, false},
    {41, false},
    {99, false},
    {96, false},
    {52, false},
    {4, ...},
    {...},
    ...
  ],
  [
    {6, false},
    {63, false},
    {10, false},
    {71, false},
    {58, false},
    {64, false},
    {70, false},
    {50, false},
    {92, false},
    {0, false},
    {7, false},
    {14, false},
    {99, false},
    {45, false},
    {26, ...},
    {...},
    ...
  ],
  [
    {31, false},
    {82, false},
    {67, false},
    {55, false},
    {27, false},
    {57, false},
    {58, false},
    {84, false},
    {6, false},
    {15, false},
    {14, false},
    {41, false},
    {49, false},
    {8, ...},
    {...},
    ...
  ],
  [
    {54, false},
    {60, false},
    {43, false},
    {26, false},
    {4, false},
    {78, false},
    {17, false},
    {28, false},
    {67, false},
    {5, false},
    {87, false},
    {93, false},
    {90, ...},
    {...},
    ...
  ],
  [
    {50, false},
    {16, false},
    {70, false},
    {32, false},
    {33, false},
    {6, false},
    {94, false},
    {52, false},
    {66, false},
    {22, false},
    {97, false},
    {64, ...},
    {...},
    ...
  ],
  [
    {7, false},
    {97, false},
    {64, false},
    {28, false},
    {18, false},
    {85, false},
    {80, false},
    {14, false},
    {37, false},
    {34, false},
    {72, ...},
    {...},
    ...
  ],
  [
    {30, false},
    {66, false},
    {93, false},
    {24, false},
    {92, false},
    {48, false},
    {80, false},
    {79, false},
    {86, false},
    {27, ...},
    {...},
    ...
  ],
  [
    {87, false},
    {76, false},
    {4, false},
    {7, false},
    {43, false},
    {92, false},
    {55, false},
    {80, false},
    {25, ...},
    {...},
    ...
  ],
  [
    {72, false},
    {69, false},
    {27, false},
    {88, false},
    {41, false},
    {34, false},
    {53, false},
    {42, ...},
    {...},
    ...
  ],
  [
    {67, false},
    {16, false},
    {50, false},
    {58, false},
    {52, false},
    {68, false},
    {70, ...},
    {...},
    ...
  ],
  [{61, false}, {57, false}, {88, false}, {54, false}, {70, false}, {77, ...}, {...}, ...],
  [{62, false}, {27, false}, {0, false}, {52, false}, {19, ...}, {...}, ...],
  [{54, false}, {32, false}, {34, false}, {47, ...}, {...}, ...],
  [{3, false}, {96, false}, {41, ...}, {...}, ...],
  [{64, false}, {55, ...}, {...}, ...],
  [{87, ...}, {...}, ...],
  [{...}, ...],
  [...],
  ...
]
```

## Marcando os números sorteados

Sempre que um número for sorteado, precisamos marcar as tabelas que tiverem aquele número. Aí, para conferir se a tabela venceu ou não, precisamos conferir linhas e colunas e avaliar se todos os números ali foram chamados

```elixir
defmodule BingoTable do
  def call_number(table, called_number) do
    table
    |> Enum.map(fn
      {number, false} -> {number, number == called_number}
      whatever -> whatever
    end)
  end

  def did_win?(table) do
    check_rows(table) or check_columns(table)
  end

  def check_rows(table) do
    table
    |> Enum.chunk_every(5)
    |> Enum.any?(fn line -> Enum.all?(line, fn {_number, called?} -> called? end) end)
  end

  def check_columns(table) do
    table
    |> Enum.chunk_every(5)
    |> Enum.zip()
    |> Enum.map(&Tuple.to_list/1)
    |> Enum.any?(fn line -> Enum.all?(line, fn {_number, called?} -> called? end) end)
  end
end
```

```output
{:module, BingoTable, <<70, 79, 82, 49, 0, 0, 12, ...>>, {:check_columns, 1}}
```

## Encontrando a cartela vencedora

Agora nos resta sortear os números de maneira sequecial, marcar as tabelas e conferir o resultado a cada número chamado:

```elixir
defmodule BingoGame do
  def call_number(
        game_tables,
        [called_number | numbers_to_call],
        _winner_table = [],
        _called_number
      ) do
    updated_tables =
      game_tables
      |> Enum.map(&BingoTable.call_number(&1, called_number))

    winner_table = Enum.filter(updated_tables, &BingoTable.did_win?/1)

    call_number(updated_tables, numbers_to_call, winner_table, called_number)
  end

  def call_number(_game_tables, _numbers_to_call, winner_table, called_number),
    do: {called_number, List.flatten(winner_table)}

  def start_game(game_tables, numbers_to_call),
    do: call_number(game_tables, numbers_to_call, [], nil)
end

{last_number, winner_table} = BingoGame.start_game(bingo_tables, bingo_numbers)
```

```output
{80,
 [
   {41, false},
   {69, false},
   {63, false},
   {88, false},
   {57, true},
   {25, false},
   {56, false},
   {23, false},
   {78, true},
   {80, true},
   {8, false},
   {92, false},
   {59, false},
   {66, false},
   {97, true},
   {48, false},
   {61, false},
   {77, false},
   {15, false},
   {14, true},
   {87, true},
   {47, false},
   {91, false},
   {12, true},
   {71, true}
 ]}
```

## Estrela 7: Calculando o resultado

Agora basta fazer o cálculo do resultado conforme o desafio:

```elixir
unmarked_sum =
  Enum.reduce(winner_table, 0, fn
    {_number, true}, acc -> acc
    {number, false}, acc -> acc + number
  end)

unmarked_sum * last_number
```

```output
74320
```

<!-- livebook:{"branch_parent_index":2} -->

## Estrela 8: Bingo invertido

Podemos reaproveitar boa parte do código do módulo `BingoGame` para criar nosso `ReverseBingoGame`. Ele fica até mais simples: basta remover da lista de tabelas aquelas que completarem uma linha ou coluna.

```elixir
defmodule ReverseBingoGame do
  def call_number([winner_table | []], _numbers_to_call, _win? = true, called_number),
    do: {called_number, List.flatten(winner_table)}

  def call_number(game_tables, [called_number | numbers_to_call], _win?, _called_number) do
    updated_tables =
      game_tables
      |> Enum.filter(fn table -> !BingoTable.did_win?(table) end)
      |> Enum.map(&BingoTable.call_number(&1, called_number))

    call_number(
      updated_tables,
      numbers_to_call,
      Enum.any?(updated_tables, &BingoTable.did_win?/1),
      called_number
    )
  end

  def start_game(game_tables, numbers_to_call),
    do: call_number(game_tables, numbers_to_call, false, nil)
end

{last_number, winner_table} = ReverseBingoGame.start_game(bingo_tables, bingo_numbers)
```

```output
{34,
 [
   {8, true},
   {34, true},
   {81, true},
   {67, true},
   {80, true},
   {83, false},
   {92, true},
   {13, true},
   {11, true},
   {41, true},
   {39, true},
   {89, false},
   {93, false},
   {49, true},
   {43, true},
   {20, true},
   {69, true},
   {3, true},
   {74, false},
   {76, true},
   {44, true},
   {72, false},
   {68, true},
   {70, false},
   {45, false}
 ]}
```

O cálculo do score é exatamente o mesmo:

```elixir
unmarked_sum =
  Enum.reduce(winner_table, 0, fn
    {_number, true}, acc -> acc
    {number, false}, acc -> acc + number
  end)

unmarked_sum * last_number
```

```output
17884
```
