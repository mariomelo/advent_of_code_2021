<!-- vim: set syntax=markdown: -->

<!-- livebook:{"persist_outputs":true} -->

# Dia 10:

## Lendo o arquivo de entrada

O arquivo de entrada deve conter uma lista de caracteres existentes em cada linha.

```elixir
input =
  "data/day_10_input.txt"
  |> File.read!()
  |> String.split("\n", trim: true)
  |> Enum.map(&String.codepoints/1)
```

```output
[
  ["<", "{", "(", "{", "(", "(", "[", "[", "<", "<", "(", "[", "[", "(", "[", "]", "[", "]", ")",
   "]", "{", "(", "[", "]", "<", ">", ")", "(", "[", "]", "<", ">", ")", "}", "]", "<", "[", "[",
   "[", "]", "{", "}", "]", "{", "(", ")", "[", "]", "}", ...],
  ["{", "<", "[", "<", "(", "(", "<", "<", "(", "{", "(", "[", "{", "{", "{", "}", "[", "]", "}",
   "<", "<", ">", "<", ">", ">", "}", "]", "<", "<", "{", "[", "]", "<", ">", "}", "(", "[", "]",
   "<", ">", ")", ">", ">", ")", "<", "{", "(", "<", ...],
  ["<", "{", "[", "[", "{", "<", "[", "[", "{", "(", "<", "[", "[", "(", "{", "}", "(", ")", ")",
   "[", "(", ")", "(", ")", "]", "]", "(", "[", "<", ">", "(", ")", "]", "(", "<", ">", "(", ")",
   ")", ")", "]", "[", "(", "(", "[", "]", "<", ...],
  ["<", "[", "[", "<", "[", "(", "[", "(", "{", "[", "{", "<", "[", "(", "{", "}", "<", ">", ")",
   "(", "[", "]", "<", ">", ")", "]", "(", "<", "<", ">", "[", "]", ">", "(", "[", "]", "(", ")",
   ")", ")", ">", "<", "[", "<", "[", "]", ...],
  ["[", "(", "(", "<", "{", "(", "(", "(", "[", "[", "<", "<", "<", "[", "<", ">", "<", ">", "]",
   "{", "{", "}", "[", "]", "}", ">", ">", "(", "(", "[", "<", ">", "<", ">", "]", "<", "(", ")",
   "[", "]", ">", ")", "<", "(", "(", ...],
  ["(", "[", "{", "(", "[", "[", "[", "{", "(", "<", "(", "{", "<", "<", "[", "]", "<", ">", ">",
   "[", "(", ")", "(", ")", "]", ">", "{", "(", "(", ")", "[", "]", ")", "}", "}", ")", "<", "(",
   "<", "<", "{", "}", "(", ")", ...],
  ["<", "{", "{", "[", "(", "<", "[", "<", "<", "[", "[", "{", "<", "(", "(", ")", "[", "]", ")",
   ">", "[", "[", "{", "}", "(", ")", "]", "{", "{", "}", "[", "]", "}", "]", "}", "[", "[", "(",
   "<", ">", "(", ")", ")", ...],
  ["{", "(", "{", "<", "[", "<", "(", "[", "[", "(", "(", "{", "(", "{", "<", ">", "(", ")", "}",
   "{", "{", "}", "{", "}", "}", ")", "}", ")", "<", "<", "<", "(", "(", ")", "{", "}", ")", "[",
   "[", "]", "(", ")", ...],
  ["{", "[", "(", "(", "(", "(", "(", "<", "{", "[", "(", "{", "<", "{", "(", ")", "[", "]", "}",
   "(", "(", ")", "(", ")", ")", ">", "{", "<", "(", ")", "{", "}", ">", "{", "{", "}", "(", ")",
   "}", "}", "}", ...],
  ["(", "(", "[", "(", "(", "<", "{", "<", "[", "(", "(", "<", "{", "{", "<", ">", "<", ">", "}",
   "{", "[", "]", "{", "}", "}", "}", ">", "<", "<", "<", "<", ">", ">", "[", "{", "}", "]", ">",
   "(", "[", ...],
  ["{", "<", "(", "[", "[", "{", "<", "{", "(", "[", "[", "<", "(", "[", "[", "]", "<", ">", "]",
   "(", "{", "}", "{", "}", ")", ")", "{", "{", "{", "}", "(", ")", "}", "(", "{", "}", "[", "]",
   ")", ...],
  ["<", "{", "[", "[", "(", "[", "<", "<", "<", "(", "<", "{", "{", "(", "(", ")", "<", ">", ")",
   "(", "(", ")", "(", ")", ")", "}", "(", "[", "{", "}", "<", ">", "]", "(", "(", ")", "{", "}",
   ...],
  ["(", "<", "{", "<", "{", "[", "[", "(", "{", "(", "<", "[", "(", "(", "<", ">", "[", "]", ")",
   "{", "{", "}", "}", ")", "<", "(", "<", ">", "<", ">", ")", "<", "[", "]", "{", "}", ">", ...],
  ["{", "(", "(", "{", "{", "[", "[", "{", "<", "[", "(", "(", "<", "<", "(", ")", "<", ">", ">",
   "[", "{", "}", "{", "}", "]", ">", "(", "(", "(", ")", "<", ">", ")", "{", "[", "]", ...],
  ["(", "(", "[", "<", "(", "(", "[", "(", "{", "{", "<", "{", "[", "{", "(", ")", "<", ">", "}",
   "<", "{", "}", "[", "]", ">", "]", "}", "{", "[", "[", "(", ")", "(", ")", "]", ...],
  ["[", "[", "{", "{", "(", "<", "<", "[", "[", "[", "[", "<", "<", "<", "<", ">", "{", "}", ">",
   "(", "{", "}", "(", ")", ")", ">", "[", "(", "[", "]", "<", ">", ")", "(", ...],
  ["{", "[", "{", "(", "(", "(", "(", "[", "<", "[", "{", "(", "[", "(", "(", ")", "(", ")", ")",
   "{", "(", ")", "(", ")", "}", "]", "[", "<", "(", ")", "{", "}", ">", ...],
  ["<", "<", "(", "[", "(", "(", "[", "{", "<", "{", "<", "<", "<", "[", "{", "}", "[", "]", "]",
   "(", "(", ")", "{", "}", ")", ">", "(", "(", "<", ">", "[", "]", ...],
  ["[", "{", "(", "(", "<", "{", "<", "[", "[", "<", "[", "{", "[", "{", "{", "}", "<", ">", "}",
   "]", "{", "[", "{", "}", "]", "[", "<", ">", "[", "]", "]", ...],
  ["<", "[", "<", "{", "(", "<", "[", "[", "<", "(", "(", "(", "<", "(", "{", "}", "[", "]", ")",
   ">", "<", "(", "<", ">", "<", ">", ")", "(", "<", ">", ...],
  ["[", "(", "[", "{", "{", "[", "<", "(", "[", "{", "[", "(", "[", "[", "(", ")", "<", ">", "]",
   "]", ")", "(", "[", "[", "<", ">", "]", "[", "(", ...],
  ["<", "<", "[", "[", "(", "[", "(", "[", "(", "<", "(", "<", "<", "[", "{", "}", "[", "]", "]",
   "<", "(", ")", "[", "]", "]", ">", "<", "{", ...],
  ["<", "(", "{", "<", "{", "(", "<", "[", "(", "{", "(", "[", "[", "{", "(", ")", "}", "(", "<",
   ">", "<", ">", ")", "]", "(", "<", "[", ...],
  ["{", "(", "[", "<", "(", "<", "[", "(", "(", "{", "[", "(", "{", "[", "(", ")", "{", "}", "]",
   "<", "<", ">", "{", "}", ">", "}", ...],
  ["<", "[", "<", "[", "<", "{", "[", "{", "<", "[", "{", "[", "<", "<", "{", "}", "<", ">", ">",
   "(", "<", ">", ")", ">", "]", ...],
  ["(", "(", "{", "[", "[", "<", "<", "[", "(", "{", "[", "{", "{", "<", "(", ")", "(", ")", ">",
   "}", "}", "{", "<", "[", ...],
  ["<", "(", "(", "<", "(", "[", "[", "(", "{", "(", "<", "{", "[", "[", "(", ")", "{", "}", "]",
   "<", "[", "]", "[", ...],
  ["{", "(", "{", "{", "{", "[", "[", "{", "{", "[", "{", "(", "<", "<", "(", ")", "{", "}", ">",
   "[", "{", "}", ...],
  ["[", "[", "(", "(", "{", "[", "{", "(", "<", "(", "{", "[", "{", "<", "[", "]", "(", ")", ">",
   "{", "(", ...],
  ["[", "[", "{", "<", "[", "(", "[", "<", "[", "(", "(", "<", "(", "[", "[", "]", "{", "}", "]",
   "[", ...],
  ["<", "<", "(", "{", "{", "{", "<", "{", "[", "<", "{", "<", "{", "<", "[", "]", "<", ">", ">",
   ...],
  ["{", "{", "(", "(", "{", "[", "[", "[", "{", "<", "[", "<", "(", "(", "[", "]", "(", ")", ...],
  ["(", "<", "(", "(", "{", "{", "(", "(", "[", "(", "(", "{", "{", "<", "{", "}", "[", ...],
  ["(", "(", "(", "[", "<", "(", "[", "(", "[", "{", "{", "{", "<", "<", "<", ">", ...],
  ["{", "{", "(", "<", "[", "<", "[", "<", "[", "<", "<", "[", "[", "(", "<", ...],
  ["<", "[", "{", "[", "[", "(", "[", "[", "{", "[", "(", "<", "[", "<", ...],
  ["(", "{", "<", "<", "<", "{", "<", "(", "{", "{", "{", "{", "{", ...],
  ["(", "[", "<", "(", "{", "[", "{", "(", "{", "(", "<", "<", ...],
  ["(", "<", "[", "<", "<", "(", "<", "[", "[", "[", "[", ...],
  ["(", "(", "{", "[", "[", "(", "(", "[", "<", "(", ...],
  ["{", "[", "(", "(", "<", "(", "[", "<", "[", ...],
  ["{", "{", "<", "{", "(", "{", "{", "(", ...],
  ["(", "(", "{", "<", "[", "[", "{", ...],
  ["[", "<", "(", "[", "[", "[", ...],
  ["<", "{", "[", "<", "<", ...],
  ["[", "[", "(", "[", ...],
  ["{", "(", "<", ...],
  ["(", "[", ...],
  ["[", ...],
  [...],
  ...
]
```

## Estrela 19: Encontrando erros

Para cada linha precisamos acumular os caracteres de abertura em uma lista para validar se os caracteres de fechamento estão

```elixir
defmodule SyntaxEvaluator do
  @openers ["(", "[", "{", "<"]
  @closers [")", "]", "}", ">"]
  @score %{")" => 3, "]" => 57, "}" => 1197, ">" => 25137}

  def eval_line(line) do
    eval_line(:ok, [], line)
  end

  def calc_score(char) do
    Map.fetch!(@score, char)
  end

  defp eval_line(:ok, openers, [current_char | rest_of_the_line])
       when current_char in @openers,
       do: eval_line(:ok, [current_char | openers], rest_of_the_line)

  defp eval_line(:error, error_char, _), do: error_char
  defp eval_line(:ok, remaining_openers, []), do: {:ok, remaining_openers}

  defp eval_line(:ok, [last_opener | other_openers], [current_char | rest_of_the_line]) do
    opener_index = Enum.find_index(@openers, fn char -> char == last_opener end)
    closer_index = Enum.find_index(@closers, fn char -> char == current_char end)

    cond do
      opener_index == closer_index -> eval_line(:ok, other_openers, rest_of_the_line)
      true -> {:error, current_char}
    end
  end
end

input
|> Enum.map(&SyntaxEvaluator.eval_line/1)
|> Enum.filter(fn {result, _} -> result != :ok end)
|> Enum.map(fn {_, char} -> SyntaxEvaluator.calc_score(char) end)
|> Enum.sum()
```

```output
316851
```

## Estrela 20: Linhas incompletas

Para descobrir as linhas incompletas, precisamos fazer o filtro inverso e obter apenas as linhas que não estavam corrompidas:

```elixir
star_20_input =
  input
  |> Enum.map(&SyntaxEvaluator.eval_line/1)
  |> Enum.filter(fn {result, _} -> result == :ok end)
```

```output
[
  ok: ["<", "[", "{", "(", "<", "<", "[", "[", "(", "(", "{", "(", "{", "<"],
  ok: ["<", "{", "(", "<", "<", "(", "(", "<", "[", "<", "{"],
  ok: ["[", "(", "<", "<", "(", "{", "[", "[", "<", "{", "[", "[", "{", "<"],
  ok: ["{", "<", "(", "[", "<", "<", "[", "<", "(", "[", "{", "{", "<"],
  ok: ["{", "(", "{", "<", "<", "[", "[", "(", "<", "[", "<", "{", "(", "{"],
  ok: ["{", "(", "<", "<", "{", "[", "{", "{", "<", "{", "[", "[", "(", "<", "{"],
  ok: ["(", "{", "(", "<", "<", "[", "(", "[", "[", "{", "<"],
  ok: ["{", "<", "(", "(", "(", "{", "(", "[", "[", "{", "<", "{", "<", "("],
  ok: ["{", "[", "{", "{", "[", "<", "{", "[", "[", "{", "{", "(", "(", "{"],
  ok: ["(", "<", "<", "(", "{", "[", "(", "<", "[", "{", "{", "[", "(", "["],
  ok: ["(", "[", "{", "{", "{", "(", "(", "[", "<", "(", "<", "[", "(", "{"],
  ok: ["<", "{", "{", "{", "[", "[", "<", "{", "[", "{", "<", "[", "<", "[", "<"],
  ok: ["[", "<", "<", "[", "[", "{", "(", "("],
  ok: ["<", "(", "[", "(", "(", "{", "{", "(", "(", "<", "("],
  ok: ["{", "<", "<", "[", "[", "[", "[", "<", "(", "<", "<", "[", "<", "("],
  ok: ["{", "(", "[", "[", "<", "{", "[", "<", "[", "(", "<", "(", "(", "[", "{"],
  ok: ["(", "(", "[", "(", "[", "{", "[", "[", "<", "{", "(", "("],
  ok: ["[", "<", "[", "[", "[", "(", "<", "["],
  ok: ["<", "{", "{", "[", "{", "<", "[", "[", "<", "<", "[", "{", "<"],
  ok: ["(", "{", "(", "(", "[", "[", "{", "[", "[", "(", "[", "["],
  ok: ["<", "(", "{", "<", "[", "(", "[", "<", "(", "<", "(", "(", "[", "("],
  ok: ["[", "<", "{", "(", "[", "{", "(", "[", "[", "(", "[", "<", "(", "["],
  ok: ["(", "<", "<", "<", "<", "{", "<", "[", "<", "<", "(", "[", "("],
  ok: ["(", "<", "(", "<", "(", "[", "(", "<", "(", "(", "{", "<", "(", "["],
  ok: ["{", "(", "[", "<", "<", "<", "(", "[", "(", "{", "(", "(", "("],
  ok: ["[", "<", "<", "{", "<", "{", "<", "<", "<", "[", "{", "(", "(", "<", "{"],
  ok: ["[", "[", "(", "{", "{", "[", "<", "<", "(", "(", "[", "<", "<"],
  ok: ["[", "[", "{", "<", "{", "(", "<", "{", "<", "<", "{", "<", "<", "{"],
  ok: ["[", "(", "{", "(", "[", "[", "(", "<", "{", "{", "{", "{", "("],
  ok: ["(", "{", "<", "(", "[", "{", "{", "(", "{", "[", "[", "{", "<", "{", "("],
  ok: ["<", "<", "<", "(", "<", "(", "[", "<", "<", "<", "{", "["],
  ok: ["(", "{", "{", "{", "[", "(", "[", "(", "[", "[", "(", "(", "{", "{"],
  ok: ["(", "{", "<", "<", "<", "{", "<", "{", "[", "[", "{", "<", "(", "[", "("],
  ok: ["(", "(", "<", "(", "(", "[", "{", "[", "{", "[", "{", "[", "[", "("],
  ok: ["{", "[", "{", "[", "<", "{", "{", "<", "{", "(", "<", "{", "(", "("],
  ok: ["[", "[", "{", "<", "(", "[", "[", "("],
  ok: ["(", "[", "(", "[", "(", "{", "[", "<", "<", "{", "{", "(", "("],
  ok: ["(", "[", "{", "{", "[", "{", "<", "[", "[", "(", "<", "<", ...],
  ok: ["(", "{", "(", "(", "{", "[", "<", "[", "(", "(", "(", ...],
  ok: ["{", "(", "(", "{", "[", "{", "(", "<", "(", "{", ...],
  ok: ["<", "<", "<", "<", "(", "[", "{", "(", "[", ...],
  ok: ["(", "<", "{", "(", "{", "(", "(", "<", ...],
  ok: ["{", "<", "<", "(", "(", "{", "(", ...],
  ok: ["<", "{", "<", "[", "{", "(", ...],
  ok: ["[", "[", "(", "{", "{", ...],
  ok: ["<", "{", "[", "(", ...],
  ok: ["(", "[", "<", ...],
  ok: ["(", "{", ...],
  ok: ["(", ...],
  ok: [...],
  ...
]
```

Como temos a lista de caracteres de abertura no resultado `{:ok, remaining_openers}`, basta criar uma função redutora para calcular a pontuação de cada linha.

```elixir
char_scores = %{
  "(" => 1,
  "[" => 2,
  "{" => 3,
  "<" => 4
}

score_calculator = fn item, acc -> acc * 5 + Map.fetch!(char_scores, item) end

star_20_result =
  star_20_input
  |> Enum.map(fn {_result, line} -> Enum.reduce(line, 0, score_calculator) end)
  |> Enum.sort()
```

```output
[199561, 226547, 232831, 310208, 16397819, 41902046, 45691823, 63101831, 80667162, 242915617,
 316226056, 356140456, 384248033, 471982657, 488196786, 569327341, 602966449, 810491656, 943325969,
 1157774944, 1672932936, 1692805414, 1890194981, 1891138683, 2018707044, 2133382668, 2182912364,
 2288035482, 2409133557, 2923249069, 3015448969, 3121859248, 3403386791, 3579413482, 4100576833,
 4136505446, 4325698081, 4331914783, 4700508721, 4858428071, 5317021411, 5536910419, 6096742714,
 10817711116, 10984258661, 18259758298, 19947996844, 20163240163, 20737807798, 23608879706, ...]
```

Como agora temos a lista de pontuação ordenada, basta encontrar o item que está no meio da lista para obter a resposta final:

```elixir
answer_index =
  star_20_result
  |> length
  |> div(2)

{answer, _} = List.pop_at(star_20_result, answer_index)

answer
```

```output
2182912364
```
