<!-- vim: set syntax=markdown: -->
<!-- livebook:{"persist_outputs":true} -->

# Dia 7: Caranguejos Submarinos

## Leitura do arquivo de entrada

Uma forma eficiente de ler o arquivo é criar um mapa onde a chave é a posição do caranguejo e o valor representa a quantidade de caranguejos naquela posição:

```elixir
input =
  File.read!("data/day_7_input.txt")
  |> String.split([",", "\n"], trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.frequencies()
```

```output
%{
  326 => 4,
  289 => 1,
  990 => 1,
  401 => 1,
  168 => 1,
  1412 => 1,
  117 => 2,
  377 => 1,
  579 => 1,
  277 => 1,
  1219 => 1,
  413 => 1,
  175 => 5,
  219 => 2,
  923 => 1,
  360 => 2,
  12 => 3,
  864 => 1,
  327 => 2,
  270 => 1,
  157 => 2,
  349 => 2,
  132 => 2,
  405 => 2,
  1092 => 1,
  427 => 1,
  716 => 1,
  848 => 1,
  367 => 1,
  44 => 2,
  1432 => 1,
  183 => 2,
  1108 => 1,
  124 => 2,
  787 => 1,
  980 => 2,
  1001 => 1,
  788 => 1,
  239 => 2,
  170 => 1,
  947 => 1,
  23 => 1,
  319 => 4,
  808 => 1,
  29 => 2,
  89 => 3,
  775 => 1,
  1200 => 1,
  203 => 1,
  437 => 1,
  ...
}
```

## Método força bruta

Para tentar o método força bruta basta definir as posições mais extremas dos caranguejos `min_position` e `max_position` e para cada posição entre as duas avaliar o combustível gasto através da fórmula:

* `VALOR_ABSOLUTO(posição_atual - posição_destino) * quantidade_de_caranguejos_na_posição`

Assim obtemos um mapa com a quantidade de combustível gasto pelos caranguejos de cada posição. Para obter o total, basta somar os valores como fizemos em `calculate_fuel_spent`.

O resultado obtido é um mapa com a quantidade de combustível gasto para cada posição de destino dos caranguejos.

```elixir
defmodule BruteForceCrabs do
  def check_every_position(first_position, last_position, crab_map) do
    first_position..last_position
    |> Enum.map(fn position ->
      {position, calculate_fuel_spent(crab_map, position)}
    end)
  end

  defp calculate_fuel_spent(crab_map, desired_position) do
    crab_map
    |> Enum.reduce(0, fn {current_position, crabs_in_position}, fuel_spent ->
      fuel_spent + abs(desired_position - current_position) * crabs_in_position
    end)
  end

  def start(crab_map) do
    min_position =
      crab_map
      |> Map.keys()
      |> Enum.min()

    max_position =
      crab_map
      |> Map.keys()
      |> Enum.max()

    check_every_position(min_position, max_position, crab_map)
  end
end

fuel_spent = BruteForceCrabs.start(input)
```

```output
[
  {0, 461611},
  {1, 460623},
  {2, 459649},
  {3, 458685},
  {4, 457725},
  {5, 456771},
  {6, 455821},
  {7, 454877},
  {8, 453937},
  {9, 452999},
  {10, 452067},
  {11, 451145},
  {12, 450227},
  {13, 449315},
  {14, 448405},
  {15, 447499},
  {16, 446597},
  {17, 445697},
  {18, 444803},
  {19, 443915},
  {20, 443031},
  {21, 442153},
  {22, 441279},
  {23, 440407},
  {24, 439537},
  {25, 438669},
  {26, 437805},
  {27, 436949},
  {28, 436097},
  {29, 435249},
  {30, 434405},
  {31, 433565},
  {32, 432727},
  {33, 431903},
  {34, 431079},
  {35, 430257},
  {36, 429445},
  {37, 428635},
  {38, 427829},
  {39, 427027},
  {40, 426229},
  {41, 425437},
  {42, 424655},
  {43, 423875},
  {44, 423099},
  {45, 422327},
  {46, 421561},
  {47, 420799},
  {48, ...},
  {...},
  ...
]
```

## Estrela 13: Economizando combustível

Agora basta descobrir qual posição exige menos combustível:

```elixir
fuel_spent
|> Enum.map(fn {_position, fuel} -> fuel end)
|> Enum.min()
```

```output
335271
```

## Estrela 14: Combustível fatorial

O consumo de combustível agora passa a ser fatorial. Por exemplo, se a distância for 5, o consumo será:

* 5 + 4 + 3 + 2 + 1 = 15

Para evitar outro loop e otimizar nosso cálculo podemos calcular o combustível gasto com a seguinte fórmula:

* `(distancia + 1) * distancia / 2`

```elixir
defmodule FatorialForceCrabs do
  def check_every_position(first_position, last_position, crab_map) do
    first_position..last_position
    |> Enum.map(fn position ->
      {position, calculate_fuel_spent(crab_map, position)}
    end)
  end

  defp calculate_fuel_spent(crab_map, desired_position) do
    crab_map
    |> Enum.reduce(0, fn {current_position, crabs_in_position}, fuel_spent ->
      fuel_spent + get_fuel_by_distance(desired_position, current_position) * crabs_in_position
    end)
  end

  defp get_fuel_by_distance(origin, destination) do
    distance = abs(origin - destination)
    floor((distance + 1) * distance / 2)
  end

  def start(crab_map) do
    min_position =
      crab_map
      |> Map.keys()
      |> Enum.min()

    max_position =
      crab_map
      |> Map.keys()
      |> Enum.max()

    check_every_position(min_position, max_position, crab_map)
  end
end

fatorial_fuel_spent = FatorialForceCrabs.start(input)
```

```output
[
  {0, 202446501},
  {1, 201984896},
  {2, 201524298},
  {3, 201064705},
  {4, 200606114},
  {5, 200148526},
  {6, 199691940},
  {7, 199236357},
  {8, 198781776},
  {9, 198328196},
  {10, 197875619},
  {11, 197424047},
  {12, 196973477},
  {13, 196523910},
  {14, 196075344},
  {15, 195627780},
  {16, 195181218},
  {17, 194735657},
  {18, 194291099},
  {19, 193847544},
  {20, 193404991},
  {21, 192963441},
  {22, 192522893},
  {23, 192083346},
  {24, 191644800},
  {25, 191207255},
  {26, 190770712},
  {27, 190335173},
  {28, 189900636},
  {29, 189467101},
  {30, 189034568},
  {31, 188603037},
  {32, 188172507},
  {33, 187742984},
  {34, 187314461},
  {35, 186886939},
  {36, 186460422},
  {37, 186034906},
  {38, 185610392},
  {39, 185186880},
  {40, 184764370},
  {41, 184342863},
  {42, 183922361},
  {43, 183502860},
  {44, 183084361},
  {45, 182666864},
  {46, 182250370},
  {47, 181834878},
  {48, ...},
  {...},
  ...
]
```

## Calculando o novo resultado

Como a estrutura produzida pelo módulo `FatorialForceCrabs` é exatamente a mesma que criamos no módulo `BruteForceCrabs` podemos calcular o resultado final com o mesmo código:

```elixir
fatorial_fuel_spent
|> Enum.map(fn {_position, fuel} -> fuel end)
|> Enum.min()
```

```output
95851339
```
