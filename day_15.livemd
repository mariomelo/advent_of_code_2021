<!-- livebook:{"persist_outputs":true} -->

# Dia 15: Chiton

## Leitura do arquivo de entrada

Mais uma vez temos um grafo, mas desta vez com pesos.

Vamos armazená-lo em um mapa, na estrutura `%{{x, y} => peso}`.

```elixir
input_matrix =
  "data/day_15_input.txt"
  |> File.read!()
  |> String.split("\n", trim: true)
  |> Enum.map(fn line -> String.split(line, "", trim: true) end)
  |> Enum.map(fn line -> Enum.map(line, &String.to_integer/1) end)

weight_map =
  for {row_weights, row} <- Enum.with_index(input_matrix),
      {weight, column} <- Enum.with_index(row_weights),
      into: %{},
      do: {{column, row}, weight}
```

```output
%{
  {76, 13} => 7,
  {37, 47} => 1,
  {65, 63} => 7,
  {38, 2} => 1,
  {1, 26} => 2,
  {83, 76} => 2,
  {32, 15} => 6,
  {89, 14} => 2,
  {35, 30} => 6,
  {37, 53} => 1,
  {4, 5} => 7,
  {8, 50} => 2,
  {78, 98} => 1,
  {95, 56} => 7,
  {74, 12} => 1,
  {11, 39} => 6,
  {65, 43} => 8,
  {22, 38} => 4,
  {14, 86} => 6,
  {20, 41} => 2,
  {29, 25} => 8,
  {86, 10} => 2,
  {83, 36} => 3,
  {29, 26} => 2,
  {47, 27} => 1,
  {4, 81} => 4,
  {31, 42} => 3,
  {9, 34} => 4,
  {90, 0} => 2,
  {67, 98} => 1,
  {13, 85} => 8,
  {63, 81} => 1,
  {82, 60} => 8,
  {47, 38} => 5,
  {15, 92} => 1,
  {58, 58} => 2,
  {20, 3} => 1,
  {61, 95} => 1,
  {23, 67} => 8,
  {78, 75} => 1,
  {79, 17} => 7,
  {75, 0} => 6,
  {16, 73} => 7,
  {76, 2} => 8,
  {58, 84} => 2,
  {58, 33} => 4,
  {47, 44} => 2,
  {54, 31} => 1,
  {13, ...} => 4,
  {...} => 4,
  ...
}
```

## Identificando o  menor caminho

Para encontrar o menor caminho, vamos utilizar o algoritmo de Djikstra:

```elixir
defmodule Dijkstra do
  def run(weight_map) do
    min_distances = %{{0, 0} => 0}
    queue = Enum.sort(min_distances)
    path = Map.new(Enum.map(weight_map, fn {node, _distance} -> {node, nil} end))

    take_a_step(weight_map, min_distances, path, queue)
  end

  def take_a_step(_weight_map, min_distances, path, _queue = []), do: {min_distances, path}

  def take_a_step(weight_map, min_distances, path, [current_node | queue]) do
    {_current_coords, current_distance} = current_node

    {updated_path, updated_distances, updated_queue} =
      current_node
      |> get_neighbors
      |> Enum.reduce(
        {path, min_distances, queue},
        fn neighbor, {reduced_path, reduced_distances, reduced_queue} ->
          distance =
            if weight_map[neighbor],
              do: current_distance + weight_map[neighbor],
              else: nil

          if distance < min_distances[neighbor] do
            updated_distances = Map.put(reduced_distances, neighbor, distance)
            updated_path = Map.replace!(reduced_path, neighbor, current_node)
            updated_queue = add_to_queue(reduced_queue, neighbor, distance)
            {updated_path, updated_distances, updated_queue}
          else
            {reduced_path, reduced_distances, reduced_queue}
          end
        end
      )

    take_a_step(weight_map, updated_distances, updated_path, updated_queue)
  end

  def add_to_queue([], node, distance), do: [{node, distance}]

  def add_to_queue(queue = [{_coords, min_distance} | _tail], node, distance)
      when distance < min_distance,
      do: [{node, distance} | queue]

  def add_to_queue([head = {_coords, _min_distance} | tail], node, distance),
    do: [head | add_to_queue(tail, node, distance)]

  def get_neighbors(_node = {{x, y}, _distance}) do
    [
      {x + 1, y},
      {x - 1, y},
      {x, y + 1},
      {x, y - 1}
    ]
  end
end

{distances, paths} = Dijkstra.run(weight_map)

distances
|> Enum.sort()
|> Enum.max()
```

```output
{{99, 99}, 363}
```

<!-- livebook:{"branch_parent_index":0} -->

## Estrela 30: A caverna gigante

Se o algoritmo estiver certo, basta criar a nova entrada e fornecê-la à função `Djikstra.run`:

_(esta parte não ficou nada eficiente e pode ser melhorada)_

```elixir
map_side = floor(:math.sqrt(Enum.count(weight_map)))

raw_big_map =
  for x <- 0..4,
      y <- 0..4,
      into: [],
      do:
        Enum.map(weight_map, fn
          {{orig_x, orig_y}, weight} ->
            {{orig_x + x * map_side, orig_y + y * map_side}, weight + x + y}
        end)

big_map =
  raw_big_map
  |> List.flatten()
  |> Enum.map(fn
    {coords, weight} when weight > 9 -> {coords, weight - 9}
    result -> result
  end)
  |> Map.new()
```

```output
%{
  {150, 137} => 5,
  {79, 254} => 3,
  {1, 246} => 3,
  {165, 437} => 3,
  {92, 439} => 1,
  {487, 278} => 7,
  {334, 232} => 7,
  {440, 15} => 6,
  {392, 198} => 7,
  {18, 103} => 2,
  {469, 44} => 6,
  {131, 170} => 5,
  {440, 452} => 9,
  {355, 320} => 8,
  {401, 346} => 8,
  {125, 238} => 4,
  {76, 13} => 7,
  {138, 278} => 4,
  {86, 451} => 7,
  {215, 277} => 1,
  {297, 142} => 5,
  {310, 481} => 8,
  {373, 444} => 4,
  {436, 103} => 4,
  {142, 180} => 6,
  {14, 164} => 2,
  {377, 222} => 1,
  {10, 433} => 8,
  {457, 178} => 1,
  {409, 196} => 9,
  {365, 479} => 7,
  {423, 255} => 6,
  {30, 322} => 4,
  {198, 146} => 4,
  {24, 389} => 7,
  {463, 186} => 8,
  {61, 121} => 4,
  {54, 331} => 4,
  {417, 25} => 5,
  {248, 394} => 4,
  {112, 138} => 4,
  {60, 220} => 8,
  {388, 228} => 9,
  {439, 387} => 8,
  {37, 453} => 5,
  {320, 461} => 8,
  {482, 11} => 7,
  {461, 118} => 8,
  {253, ...} => 4,
  {...} => 3,
  ...
}
```

Por fim, testamos a nova entrada para obter a estrela 30:

```elixir
big_map_side = floor(:math.sqrt(Enum.count(big_map)))

{big_distances, big_path} = Dijkstra.run(big_map)

big_distances
|> Enum.sort()
|> Enum.max()
```

```output
{{499, 499}, 2835}
```
