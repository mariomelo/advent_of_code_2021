<!-- vim: set syntax=markdown: -->
<!-- livebook:{"persist_outputs":true} -->

# Dia 1: Medindo a profundidade

## Obtendo o input

O arquivo precisa ser lido e separado a cada quebra de linha. Ao fazer isso, acaba sobrando uma linha vazia ao final da lista de items que precisa ser removida. Por último os números precisam ser convertidos para Strings.

```elixir
defmodule InputReader do
  def get_inputs do
    "data/day_1_input.txt"
    |> File.read!()
    |> String.split("\n")
    |> List.delete("")
    |> Enum.map(&String.to_integer/1)
  end
end

inputs = InputReader.get_inputs()
```

```output
[150, 152, 155, 156, 157, 141, 124, 138, 143, 145, 144, 146, 148, 149, 148, 149, 124, 122, 123, 124,
 117, 118, 119, 132, 159, 152, 175, 183, 194, 222, 226, 237, 242, 248, 229, 225, 227, 235, 229, 230,
 227, 229, 252, 253, 251, 269, 270, 266, 268, 269, ...]
```

## Contando as descidas

Agora basta percorrer a lista e acumular o número de vezes em que a profundidade é maior do que a profundidade anterior.

```elixir
inputs
|> Enum.chunk_every(2, 1, :discard)
|> Enum.map(&List.to_tuple/1)
|> Enum.filter(fn {last_depth, current_depth} -> current_depth > last_depth end)
|> Enum.count()
```

```output
1502
```

## Transformando os inputs

Agora, precisamos indexar a lista para facilitar o acesso aos inputs adjacentes.

```elixir
ordered_inputs =
  inputs
  |> Enum.with_index(fn element, index -> {index, element} end)
```

```output
[
  {0, 150},
  {1, 152},
  {2, 155},
  {3, 156},
  {4, 157},
  {5, 141},
  {6, 124},
  {7, 138},
  {8, 143},
  {9, 145},
  {10, 144},
  {11, 146},
  {12, 148},
  {13, 149},
  {14, 148},
  {15, 149},
  {16, 124},
  {17, 122},
  {18, 123},
  {19, 124},
  {20, 117},
  {21, 118},
  {22, 119},
  {23, 132},
  {24, 159},
  {25, 152},
  {26, 175},
  {27, 183},
  {28, 194},
  {29, 222},
  {30, 226},
  {31, 237},
  {32, 242},
  {33, 248},
  {34, 229},
  {35, 225},
  {36, 227},
  {37, 235},
  {38, 229},
  {39, 230},
  {40, 227},
  {41, 229},
  {42, 252},
  {43, 253},
  {44, 251},
  {45, 269},
  {46, 270},
  {47, 266},
  {48, ...},
  {...},
  ...
]
```

A lista precisa então de ser transformada em um mapa. Repare que por ser um mapa, perdemos a ordenação:

```elixir
indexed_inputs = Map.new(ordered_inputs)
```

```output
%{
  912 => 3442,
  1133 => 4314,
  1276 => 4880,
  326 => 1260,
  1639 => 6206,
  1846 => 7052,
  33 => 248,
  1397 => 5338,
  1417 => 5504,
  1060 => 3936,
  289 => 1210,
  1019 => 3838,
  1991 => 7679,
  518 => 2140,
  990 => 3818,
  1924 => 7417,
  456 => 1844,
  1723 => 6504,
  1076 => 3983,
  401 => 1646,
  1509 => 5721,
  168 => 581,
  1412 => 5429,
  309 => 1279,
  117 => 408,
  1817 => 6898,
  377 => 1513,
  579 => 2305,
  1952 => 7408,
  277 => 1166,
  1980 => 7596,
  399 => 1635,
  1219 => 4630,
  1316 => 4944,
  413 => 1692,
  477 => 1916,
  1385 => 5355,
  246 => 1060,
  704 => 2678,
  175 => 621,
  740 => 2823,
  621 => 2358,
  869 => 3223,
  219 => 833,
  923 => 3428,
  1969 => 7542,
  492 => 1976,
  360 => 1412,
  1425 => 5527,
  1716 => 6508,
  ...
}
```

## Calculando as médias móveis

Agora temos a lista de inputs ordenada em `ordered_inputs` e o mapa indexado em `indexed_inputs`.

Isso vai nos permitir somar cada item da lista com os dois próximos inputs para criarmos a média móvel. Se em algum momento não for possível obter os dois próximos inputs significa que chegamos ao final da lista

```elixir
sliding_window_inputs =
  Enum.map(ordered_inputs, fn {index, element} ->
    case Map.fetch(indexed_inputs, index + 2) do
      {:ok, third_value} -> element + third_value + Map.fetch!(indexed_inputs, index + 1)
      :error -> element
    end
  end)
```

```output
[457, 463, 468, 454, 422, 403, 405, 426, 432, 435, 438, 443, 445, 446, 421, 395, 369, 369, 364, 359,
 354, 369, 410, 443, 486, 510, 552, 599, 642, 685, 705, 727, 719, 702, 681, 687, 691, 694, 686, 686,
 708, 734, 756, 773, 790, 805, 804, 803, 807, 795, ...]
```

## Contando os incrementos

Esse trecho é exatamente igual ao da Estrela 1, pois agora temos uma lista simples e apenas precisamos contar os incrementos.

Se você preferir, aqui também é possível utilizar o `Enum.reduce`

```elixir
defmodule Star2 do
  def check_next_input(accumulated_results, _, []), do: accumulated_results

  def check_next_input(accumulated_results, current_depth, [next_depth | list])
      when next_depth > current_depth do
    check_next_input(accumulated_results + 1, next_depth, list)
  end

  def check_next_input(accumulated_results, current_depth, [next_depth | list])
      when next_depth <= current_depth do
    check_next_input(accumulated_results, next_depth, list)
  end
end
```

```output
{:module, Star2, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:check_next_input, 3}}
```

## Juntando tudo!

Agora só falta juntar tudo, da mesma maneira que fizemos para a primeira estrela.

```elixir
[first_depth | list_of_depths] = sliding_window_inputs
Star2.check_next_input(0, first_depth, list_of_depths)
```

```output
1538
```
